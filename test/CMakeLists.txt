cmake_minimum_required(VERSION 3.20)
find_package(GTest)

if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)
  string(APPEND CMAKE_CXX_FLAGS " -pipe -pedantic -Wall -O -ggdb")
  string(APPEND CMAKE_CXX_FLAGS_DEBUG " -O0 -Og -ggdb3")
  string(APPEND CMAKE_CXX_FLAGS_RELEASE " -O2 -Werror")
endif()

link_libraries(gh4ck3r GTest::gtest_main mnl)

include(GoogleTest)
function(add_unittest TestMainSrc)
  cmake_path(GET TestMainSrc STEM LAST_ONLY TESTNAME)
  list(JOIN ARGV " " SRCS)
  add_executable(${TESTNAME} ${SRCS})
  gtest_discover_tests(${TESTNAME})
endfunction()

add_unittest(hexdump.test.cc)
add_unittest(lazygetter.test.cc)
add_unittest(concat.test.cc)
add_unittest(logger.test.cc)
add_unittest(recipe.test.cc)
add_unittest(base64.test.cc)
add_unittest(defer.test.cc)
add_unittest(type_traits.test.cc)
add_unittest(typemap.test.cc)
add_unittest(file.test.cc)
add_unittest(singleton.test.cc)
add_unittest(network.test.cc)
add_unittest(mnl.test.cc)

if(TARGET httplib::httplib)
  add_unittest(http.test.cc)
endif()

get_target_property(PUBLIC_HEADERS gh4ck3r PUBLIC_HEADER)
if(include/gh4ck3r/crypto.hh IN_LIST PUBLIC_HEADERS)
  add_unittest(crypto.test.cc)
endif()
